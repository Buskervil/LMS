// <auto-generated />
using System;
using Lms.Courses.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lms.Courses.Infrastructure.Migrations
{
    [DbContext(typeof(CoursesContext))]
    [Migration("20240302195524_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lms.Courses.Domain.Course.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.CourseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseSectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PreviousItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("CourseItem");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.CourseSection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PreviousSection")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSection", (string)null);
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.Article", b =>
                {
                    b.HasBaseType("Lms.Courses.Domain.Course.CourseItem");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.CourseItem", b =>
                {
                    b.HasOne("Lms.Courses.Domain.Course.CourseSection", null)
                        .WithMany("CourseItems")
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.CourseSection", b =>
                {
                    b.HasOne("Lms.Courses.Domain.Course.Course", null)
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.Article", b =>
                {
                    b.HasOne("Lms.Courses.Domain.Course.CourseItem", null)
                        .WithOne()
                        .HasForeignKey("Lms.Courses.Domain.Course.Article", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.Course", b =>
                {
                    b.Navigation("CourseSections");
                });

            modelBuilder.Entity("Lms.Courses.Domain.Course.CourseSection", b =>
                {
                    b.Navigation("CourseItems");
                });
#pragma warning restore 612, 618
        }
    }
}
